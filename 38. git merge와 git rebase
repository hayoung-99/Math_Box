브랜치에 다른 브랜치의 commit 내용과 merge해주는 [git merge branch이름] 커맨드 대신에
[git rebase branch이름]을 쓸 수 있다. 

여기서 rebase란 (커밋을 재배치하다)로 해석할 수 있는데, 즉 기존에 commit을 merge하면 하나 새로 생성되는 merge commit 구조가 아닌, merge할 다른 브랜치의 commit을 지금 commit의 이전에 거쳐온 것처럼 보여지는 구조로 재배치됨을 의미함. 

[git rebase branch 이름] -> conflict가 발생하면 기존 merge할 때의 conflict를 해결하는 것처럼 사용자가 직접 코드 내용을 수정 및 저장 -> [git add .] -> [git rebase --continue] 
=> 마지막 단계에서 기존 merge에서 [git commit]을 하는게 아닌, [git rebase --continue]를 써야 함이 차이점이다.

Q. merge와 rebase의 차이점은 무엇일까?

아래의 예시 참고

(1) rebase인 경우
* 72ce7bbb07feee1d2b841f060abf13f0a6b801f2 (HEAD -> premium) Add get_remainder function
* 976c7ffc7bd3a2441424cb3e1f5969a5eaf1b454 (test) Add get_Median function
...

(2) merge의 경우
*   2807c8f40d72ee2975133a06061366827ca6ecb7 (HEAD -> premium) Merge branch 'test' into premium
|\
| * e5298cb98e1220b9666aaafe09e49752992b81bc (test) Add get_Median function
* | 5651d24b540afc015d538b92191dd39c47af47b6 Add get_remainder function
|/
...

=> (1)의 경우 rebase를 통해 둘의 commit을 merge했는데, history가 마치 premium 브랜치가 get_Median commit 다음에 get_remainder commit을 한 것처럼 보인다. 반면에 (2)의 경우엔 두 브랜치가 merge하여 하나의 새로운 commit이 생성되었다. 
즉 둘의 결과는 결국 같지만, rebase의 경우 premium 브랜치가 test 브랜치와 merge되어 새로운 commit을 하나 만드는게 아니라, premium 브랜치의 commit history가 마치 test 브랜치의 commit 내용이었다가 추가적으로 get_remainder 함수를 만들어 commit한 것처럼 된다. 

정리) rebase는 새로운 commit을 만들지 않는다.
rebase로 만들어진 commit history는 merge로 만들어진 commit history보다 좀 더 깔끔하다.
그리고 둘은 모두 결과물이 같다. 그저 좀 더 commit history가 더 깔끔하게 하기 위함이다.

rebase를 사용하는 경우: 좀 더 깔끔하게 하기 위함이고, 둘의 merge 정보가 그리 중요하지 않을 때(예를 들어 test 브랜치에서 실험한 내용을 premium 브랜치에 적용할 때) 사용
merge를 사용하는 경우: 둘이 merge했음을 기재해야 할 때