branch: 하나의 코드 관리 흐름. 

맨 처음 한 commit을 root commit이라 하는데, 이 root commit 하나에서 여러 갈래로 commit 흐름이 나뉜다. 이 때 하나 하나의 흐름, 즉 한 가지를 branch라고 한다.

예를 들어 부분유료어플을 생각해보면 쉬움. 일반 기능은 무료버전/유료버전 똑같이 지원하고, 여기서 유료만이 할 수 있는 부분을 따로 더 추가하는 방식이라 생각하면 됨

[git status]
: 할 때 출력되는 'On branch main' 문구란, 메인 브랜치 위에 있다로 해석된다. 여기서 메인 브랜치란, 레포지토리를 만들고 commit을 하면 자동으로 생기는 브랜치이다. 즉 프로젝트에는 적어도 하나의 흐름이라는 게 있어야할테고, 이 때의 기본 흐름이 바로 기본 branch가 됨

지금까지의 commit들은 기본 기능 지원이라 생각하고, 이제 유료부분을 만들어보자. 
그러면 우선 새로운 가지 하나를 뻗어야 하므로 새로운 branch를 만들어야 한다. 
[git branch 이름]
: [이름]이라는 branch를 하나 새로 생성함

[git checkout 이름]
: 앞서 branch를 생성했다는 가정 하에, 기존 branch 이름을 입력하면 해당 branch로 이동함. 그 후 [git status]를 실행하면 'On branch 이름'이라고 출력될 것이다.

: 다른 branch로 이동한 후, 기존 파일의 내용을 수정하여 commit까지 하면 당연히 해당 내용이 수정되어 있을 것이다. 그런데 다시 main 브랜치로 이동하여 그 파일을 보면 다른 branch에서 수정했던 파일과 달리 기존 파일의 내용 그대로 유지되어 있다. => 이게 바로 branch의 특징

: 즉 다른 branch에서 수행한 모든 작업들은 또다른 branch에서 아무런 영향을 주지 않는다.